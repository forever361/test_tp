
-- 创建用户团队关联表
CREATE TABLE xcheck.user_teams (
  userid INT NOT NULL,
  teamid INT NOT NULL,
  is_owner INT NOT NULL DEFAULT 0,
  FOREIGN KEY (userid) REFERENCES xcheck."user" (user_id),
  FOREIGN KEY (teamid) REFERENCES xcheck.team (team_id),
  PRIMARY KEY (userid, teamid)
);



-- Table: xcheck.role2

-- DROP TABLE IF EXISTS xcheck.role2;

CREATE TABLE IF NOT EXISTS xcheck.role2
(
    role_id integer NOT NULL,
    name character(100) COLLATE pg_catalog."default",
    read character(5) COLLATE pg_catalog."default",
    write character(5) COLLATE pg_catalog."default",
    role_value character(300) COLLATE pg_catalog."default",
    CONSTRAINT role2_pkey PRIMARY KEY (role_id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS xcheck.role2
    OWNER to postgres;


3002	DelosUsers                                                                                          	0	1	00001000011
3001	Guest                                                                                               	1	0	00000000010
3000	Admin                                                                                               	0	1	11111111111
3003	ChinaDataSolution                                                                                   	0	1	11100000011

11|11|11|11|11|11|11|11|11|11|11
00|00|00|00|00|00|00|00|00|10|00
00|00|00|00|11|00|00|00|00|11|11
11|11|11|00|00|00|00|00|00|11|11


-----

import os
import oss2

def create_local_directories(remote_path, local_root):
    remote_directories = remote_path.split('/')
    local_path = local_root

    for i, directory in enumerate(remote_directories):
        local_path = os.path.join(local_path, directory)
        if i < len(remote_directories) - 1 and not os.path.exists(local_path):
            os.makedirs(local_path)

def download_oss_directory(oss_dir, sav_dir, access_key_id, access_key_secret, endpoint, bucket_name):
    auth = oss2.Auth(access_key_id, access_key_secret)
    bucket = oss2.Bucket(auth, endpoint, bucket_name)

    for obj in oss2.ObjectIterator(bucket, prefix=oss_dir):
        if obj.is_prefix():
            # 跳过目录
            continue

        remote_path = obj.key
        local_path = os.path.join(sav_dir, remote_path)

        create_local_directories(remote_path, sav_dir)

        # 下载文件
        bucket.get_object_to_file(remote_path, local_path)
        print(f'Downloaded: {local_path}')

if __name__ == '__main':
    # 远程OSS目录路径
    oss_dir = 'new/test/TANOS/50001/csv/'

    # 本地保存目录的根路径
    local_root = './'

    # 阿里云OSS配置
    access_key_id = 'your_access_key_id'
    access_key_secret = 'your_access_key_secret'
    endpoint = 'your_endpoint'
    bucket_name = 'your_bucket_name'

    download_oss_directory(oss_dir, local_root, access_key_id, access_key_secret, endpoint, bucket_name)



create sequence xcheck.target_id_seq increment by 1 minvalue 1 no maxvalue start with 1;
CREATE TABLE xcheck.config_target_info
(
    target_id integer NOT NULL DEFAULT nextval('xcheck.target_id_seq'::regclass),
    user_id integer NOT NULL,
    database_type character(50) COLLATE pg_catalog."default",
    target_access_id character(100) COLLATE pg_catalog."default",
    target_secret_access_key character(100) COLLATE pg_catalog."default",
    target_project character(100) COLLATE pg_catalog."default",
    target_endpoint character(100) COLLATE pg_catalog."default",
    create_date timestamp without time zone,
    CONSTRAINT config_target_info_pkey PRIMARY KEY (target_id)
)


create sequence xcheck.api_suite_id_seq increment by 1 minvalue 1 no maxvalue start with 10000;
CREATE TABLE xcheck.api_batch_suite
(
    suite_id character varying NOT NULL DEFAULT nextval('xcheck.api_suite_id_seq'::regclass),
    user_id character varying,
    suite_name character varying,
    create_date timestamp without time zone
)


create sequence xcheck.api_job_id_seq increment by 1 minvalue 1 no maxvalue start with 10000;
CREATE TABLE xcheck.api_batch_job
(
    job_id character varying NOT NULL DEFAULT nextval('xcheck.api_job_id_seq'::regclass),
    user_id character varying,
    job_name character varying,
    create_date timestamp without time zone
)

create sequence xcheck.api_result_id_seq increment by 1 minvalue 1 no maxvalue start with 1;
CREATE TABLE xcheck.api_batch_result
(
    api_result_id character varying COLLATE pg_catalog."default" NOT NULL DEFAULT nextval('xcheck.api_result_id_seq'::regclass),
    job_id character varying COLLATE pg_catalog."default",
	case_id racter varying COLLATE pg_catalog."default",
    user_id character varying COLLATE pg_catalog."default",
    url character varying COLLATE pg_catalog."default",
    methods character varying COLLATE pg_catalog."default",
    request_body character varying COLLATE pg_catalog."default",
    headers character varying COLLATE pg_catalog."default",
    expected_result character varying COLLATE pg_catalog."default",
    test_result character varying COLLATE pg_catalog."default",
    create_date timestamp without time zone
)

create sequence xcheck.api_case_id_seq increment by 1 minvalue 1 no maxvalue start with 10000;
CREATE TABLE xcheck.api_batch_case
(
    case_id character varying COLLATE pg_catalog."default" NOT NULL DEFAULT nextval('xcheck.api_case_id_seq'::regclass),
    suite_id character varying COLLATE pg_catalog."default",
    user_id character varying COLLATE pg_catalog."default",
    url character varying COLLATE pg_catalog."default",
    methods character varying COLLATE pg_catalog."default",
    request_body character varying COLLATE pg_catalog."default",
    headers character varying COLLATE pg_catalog."default",
    expected_result character varying COLLATE pg_catalog."default",
    create_date timestamp without time zone
)


CREATE TABLE xcheck.api_batch_token
(
    job_id character varying COLLATE pg_catalog."default",
    url character varying COLLATE pg_catalog."default",
    body character varying COLLATE pg_catalog."default",
	test_rule character varying COLLATE pg_catalog."default",
    create_date timestamp without time zone
)




CREATE TABLE IF NOT EXISTS tanos.data_batch_test_case
(
    case_id integer NOT NULL DEFAULT nextval('tanos.generator_room_id'::regclass),
    case_name character(100) COLLATE pg_catalog."default",
    user_id integer,
    create_date timestamp without time zone,
    CONSTRAINT test_case_pkey4 PRIMARY KEY (case_id)
)



